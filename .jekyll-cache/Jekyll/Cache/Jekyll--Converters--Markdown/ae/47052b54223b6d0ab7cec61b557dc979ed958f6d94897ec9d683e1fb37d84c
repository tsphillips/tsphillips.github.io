I"v<p>In the Rust programming language, a <code class="highlighter-rouge">String</code> is a data structure
(a struct) that manages its own memory. In fact, a <code class="highlighter-rouge">String</code> is
really just some convenience functions that operate on a
<code class="highlighter-rouge">Vec&lt;u8&gt;</code>.</p>

<p>Suppose I create a new <code class="highlighter-rouge">String</code>:</p>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust"><span class="k">let</span> <span class="k">mut</span> <span class="n">buffer</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span></code></pre></figure>

<p>The memory backing the <code class="highlighter-rouge">String</code> (which is <a href="https://doc.rust-lang.org/src/alloc/string.rs.html">actually a <code class="highlighter-rouge">Vec&lt;u8&gt;</code></a>) is
valid for the scope in which it is created. As soon as we leave
this scope, then the memory goes away. This lets us modify the <code class="highlighter-rouge">String</code>
in place, with code like this:</p>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust"><span class="c">// Reset the String to be empty, or blank</span>
<span class="n">buffer</span><span class="nf">.clear</span><span class="p">();</span>
<span class="c">// Append some text to the end of the String</span>
<span class="n">buffer</span><span class="nf">.push_str</span><span class="p">(</span><span class="s">"Two dozen lemurs sat on a fence."</span><span class="p">);</span>
<span class="c">// Print the String (display it to the console or standard output)</span>
<span class="nd">println!</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span></code></pre></figure>

<p>What we cannot do, however, is return a <code class="highlighter-rouge">String</code> from a function.
This is because as soon as our local scope goes away, the <code class="highlighter-rouge">String</code> will
loose access to its allocated memory. (The lifetime of memory expires.)</p>

<p>Some useful functions to know for the <code class="highlighter-rouge">String</code> struct are:</p>

<ul>
  <li><code class="highlighter-rouge">String::new()</code></li>
  <li><code class="highlighter-rouge">String::with_capacity(size)</code></li>
  <li><code class="highlighter-rouge">String::clear()</code></li>
  <li><code class="highlighter-rouge">String::push_str(str)</code></li>
  <li><code class="highlighter-rouge">String::len()</code></li>
  <li><code class="highlighter-rouge">String::from(str)</code></li>
</ul>

<p><a href="https://doc.rust-lang.org/std/string/">Documentation for the String struct</a> can be found in the
<a href="https://doc.rust-lang.org/std/index.html">Rust Standard Library documentation</a>.</p>

<p>Be careful not to confuse the <code class="highlighter-rouge">String</code> struct with the
<a href="https://doc.rust-lang.org/std/primitive.str.html">primitive data type called <code class="highlighter-rouge">str</code></a>,
or a string slice.
A <code class="highlighter-rouge">str</code> is really zero or more contiguous UTF-8 characters. Sometimes you can modify
elements in a <code class="highlighter-rouge">str</code>, and sometimes you cannot. Consider where the characters
actually reside.</p>

<p>The difference between a <code class="highlighter-rouge">String</code> struct and a <code class="highlighter-rouge">str</code> data type can be confusing;
you should call a <code class="highlighter-rouge">String</code> a <em>string</em>, and a <code class="highlighter-rouge">str</code> a <em>string slice</em>.
Remember that you can modify a string, but you cannot modify a string slice.</p>

<p>In the code below, the characters in the <code class="highlighter-rouge">str</code> (<em>string slice</em>) are in the source code, and so get
compiled into the binary.</p>

<figure class="highlight"><pre><code class="language-rust" data-lang="rust"><span class="k">let</span> <span class="k">mut</span> <span class="n">my_str</span> <span class="o">=</span> <span class="s">"Many good characters."</span><span class="p">;</span></code></pre></figure>
:ET